<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello-world</title>
    <url>/2020-04-14-hello-world.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>Hello</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman進階</title>
    <url>/2017-10-22-Postman%E9%80%B2%E9%9A%8E.html</url>
    <content><![CDATA[<blockquote>
<p>這篇文章預想是給入門一陣子<br>但是有菜味（稍去土味？）<br>而且時常搞不清楚前輩為什麼這麼懂接口<br>而自己卻搞不清楚自己的API究竟丟了什麼鬼出來<br>的菜菜–<strong>我</strong>  </p>
<blockquote>
<p>煩請高手指正, 熟悉使用Postman請大力鞭策  </p>
</blockquote>
</blockquote>
<a id="more"></a>
<h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>有鑒於我在網路上搜索了將近一個工作天的資料<br>中文的<strong><em>Postman</em></strong>介紹大多只有貼上Url然後Send然後結束<br>中文的使用資料有限</p>
<p><strong>身為一個</strong><em>有信仰的工程師</em><strong>絕不能單單如此</strong></p>
<p>現在的系統開發模式開始走向微開發，以模組化的方式呼叫不同接口，以達到重複使用的想法（也包含降低伺服器負擔 和 分散系統的耦合度 的想法）熟悉接口的開發和測試是必要技能。</p>
<h3 id="下面將從以幾點做測試"><a href="#下面將從以幾點做測試" class="headerlink" title="下面將從以幾點做測試"></a>下面將從以幾點做測試</h3><ol>
<li><strong>透過postman對api &amp; web service 發出請求測試</strong></li>
<li><strong>Postman 測試操作 ＆ Postman 請求發出前的預設參數</strong></li>
</ol>
<h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><h3 id="起源-在某份工作時-在做app接口的我問前輩："><a href="#起源-在某份工作時-在做app接口的我問前輩：" class="headerlink" title="起源 - 在某份工作時, 在做app接口的我問前輩："></a>起源 - 在某份工作時, 在做app接口的我問前輩：</h3><blockquote>
<p>&#8194;&#8194;&#8194;&#8194;：postman 這麼屌 能夠對發佈的api發出請求取資料那Webservice呢？<br>前輩：這什麼怪問題，沒人這樣用吧，反正我沒這樣用過，也沒想過這樣用（彈煙）<br>&#8194;&#8194;&#8194;&#8194;：。。。恩。。。那我們應該用不到。。。</p>
</blockquote>
<h3 id="轉變"><a href="#轉變" class="headerlink" title="轉變"></a>轉變</h3><p>後來的我意識到，<br>其實只要以<strong>http協定</strong>對任何公開的服務發出請求<strong>都能使用postman來測試</strong>。<br>可以視 <strong><em>postman = browser</em></strong> 只是將封包内容以字符顯示</p>
<blockquote>
<p>如果你可以自動翻譯ＨＴＭＬ其實你也可以用它上網ＸＤ</p>
</blockquote>
<h3 id="透過postman對api-amp-web-service-發出請求"><a href="#透過postman對api-amp-web-service-發出請求" class="headerlink" title="透過postman對api &amp; web service 發出請求"></a>透過postman對api &amp; web service 發出請求</h3><p>首先，我先以 <em>即匯站</em> 的api 來做測試(<a href="https://tw.rter.info/capi.php" target="_blank" rel="noopener">https://tw.rter.info/capi.php</a>)<br><img src="../../../../images/Postman-進階/1.png" alt="" title="" width="400px"/><img src="../../../../images/Postman-進階/2.png" alt="" title="" width="400px" /></p>
<p>下面是對另一個開放<strong>web service(SOAP)</strong>做測試<br>基本上一個正常的<strong>web service(SOAP)</strong>都會有一個這樣的頁面可以看到所有提供的接口<br><img src="../../../../images/Postman-進階/3.png" alt="" title="" width="400px"/></p>
<p>框出來的部分就是在描述請求方式的<br>說明中表示 <strong>使用post請求</strong> 然後挾帶的<strong>文件格式</strong>是<strong>text/xml</strong><br>下面則是response的說明<br><img src="../../../../images/Postman-進階/4.png" alt="" title="" width="400px"/></p>
<blockquote>
<p>發出正確的請求<br><img src="../../../../images/Postman-進階/5.png" alt="" title="" width="400px"/></p>
</blockquote>
<blockquote>
<p>發出失敗的請求（原因：請求格式錯誤）<br><img src="../../../../images/Postman-進階/6.png" alt="" title="" width="400px"/></p>
</blockquote>
<h2 id="預設參數"><a href="#預設參數" class="headerlink" title="預設參數"></a>預設參數</h2><h3 id="Postman-測試操作-＆-Postman-請求發出前的預設參數"><a href="#Postman-測試操作-＆-Postman-請求發出前的預設參數" class="headerlink" title="Postman 測試操作 ＆ Postman 請求發出前的預設參數"></a>Postman 測試操作 ＆ Postman 請求發出前的預設參數</h3><p>​<br>接下來 如果<strong>api</strong> 或是webservice回傳的<strong>資料過多</strong>呢？<br><img src="../../../../images/Postman-進階/7.png" alt="" title="" width="400px"/> </p>
<p>某些api可能會回吐大量不必要的設置參數，<br>這時利用 <strong>postman test code</strong> 能夠省去需多人力的不必要<br><img src="../../../../images/Postman-進階/8.png" alt="" title="" width="400px"/> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(responseCode.code &#x3D;&#x3D; 200)</span><br><span class="line">&#123;</span><br><span class="line">​    var data &#x3D; xml2Json(responseBody);</span><br><span class="line">​    var obj &#x3D; data[&#39;soap:Envelope&#39;][&#39;soap:Body&#39;][&#39;getSupportCityResponse&#39;][&#39;getSupportCityResult&#39;].string;</span><br><span class="line">​    for(var i in obj)</span><br><span class="line">​    &#123;</span><br><span class="line">​        &#x2F;&#x2F;tests[obj[i]] &#x3D; obj[i] &#x3D; obj[i].has(&quot;台北&quot;);</span><br><span class="line">​        if(obj[i].has(&quot;台北&quot;)) &#x2F;&#x2F;字串擁有&quot;your_search_string&quot;</span><br><span class="line">​        &#123;</span><br><span class="line">​            tests[obj[i]] &#x3D; true;</span><br><span class="line">​            var num &#x3D; obj[i].replace(&quot;台北 (&quot;, &quot;&quot;);</span><br><span class="line">​            num &#x3D; num.replace(&quot;)&quot;, &quot;&quot;);</span><br><span class="line">​            postman.setGlobalVariable(&quot;get-Taipei-code&quot;, num);&#x2F;&#x2F;設置postman全域變數</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">​    tests[responseCode.code] &#x3D; false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>設置完 全域變數 後我們能這樣使用<br><img src="../../../../images/Postman-進階/9.png" alt="" title="" width="400px"/><br>當然 還有<strong>json 轉object</strong> 的操作方式<br><img src="../../../../images/Postman-進階/10.png" alt="" title="" width="400px"/>  </p>
<h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><p>在api的開發期間通常都要大量的測試，<br>不論在本地環境、預發布環境或是正式環境。<br>postman提供設置環境變數的功能 （右上角齒輪能夠點開頁面）<br><img src="../../../../images/Postman-進階/11.png" alt="" title="" width="400px"/>  </p>
<blockquote>
<p>看名字就能知道<br>這是設置你的環境變數。好啦 ！ 這是我玩的過程做的小小記錄<br><img src="../../../../images/Postman-進階/12.png" alt="" title="" width="400px"/><br><img src="../../../../images/Postman-進階/13.png" alt="" title="" width="400px"/> </p>
</blockquote>
]]></content>
      <categories>
        <category>後端技巧</category>
      </categories>
      <tags>
        <tag>Postman</tag>
        <tag>Learn</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Exceptionless In WinServer2012(Azure)</title>
    <url>/2020-04-16-Exceptionless-In-WinServer2012-Azure.html</url>
    <content><![CDATA[<blockquote>
<p>公司日漸壯大 越來越多的日志和伺服器讓人毛骨悚然！！！<br>Exceptionless 的方式算是日志管理的趨勢了吧？<br>這篇算是一點小筆記，記錄點遇到的狀況，問題在最後哦！</p>
</blockquote>
<a id="more"></a>
<h1 id="exceptionless-5-0-0-本地运行"><a href="#exceptionless-5-0-0-本地运行" class="headerlink" title="exceptionless 5.0.0 本地运行"></a>exceptionless 5.0.0 本地运行</h1><ol>
<li>下载 docker desktop</li>
<li>下载exceptionless-master 分支</li>
<li>解压缩后, exceptionless 文件夹下<br>cmd 下指令 docker-compose up 启动 yml 配置<blockquote>
<p>变更端口及配置需调整yml</p>
</blockquote>
</li>
</ol>
<h2 id="exceptionless-api-localhost-5000"><a href="#exceptionless-api-localhost-5000" class="headerlink" title="exceptionless api localhost:5000"></a>exceptionless api localhost:5000</h2><ol>
<li>mvc 项目引用 exceptionless.MVC, exceptionless.Log4net</li>
<li>Web.config添加</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;appSettings&gt;</span><br><span class="line">  &lt;add key&#x3D;&quot;ProjectName&quot; value&#x3D;&quot;Gateway&quot;&#x2F;&gt;</span><br><span class="line">  &lt;add key&#x3D;&quot;exceptionless:ServerUrl&quot; value&#x3D;&quot;http:&#x2F;&#x2F;localhost:5000&#x2F;&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;appSettings&gt;</span><br><span class="line">&lt;exceptionless apiKey&#x3D;&quot;5ZG8kCXlWG2Lph7DQwEfMJJxNquQIKf6oeYdsM47&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>以上即可使用 ExceptionLess 5.0</p>
<h1 id="Exceptionless-4-1-2861-release-版本-本地运行"><a href="#Exceptionless-4-1-2861-release-版本-本地运行" class="headerlink" title="Exceptionless.4.1.2861 release 版本 本地运行"></a>Exceptionless.4.1.2861 release 版本 本地运行</h1><ol>
<li>安装java 环境(运行elasticSearch 用)<img src="../../../../images/ExceptionlessInWinServer/1.png" alt="" title="" width="400px"/></li>
<li>下载 exceptionless 4.1.2861 版本，<br>并解压缩至 ex: C:\Exceptionless.4.1.2861</li>
<li>下载 elasticsearch-5.5.2 后，<br>解压缩至 ex: C:\Exceptionless.4.1.2861<img src="../../../../images/ExceptionlessInWinServer/2.png" alt="" title="" width="400px" /></li>
<li>下载 kibana-5.5.2 后,<br>解压缩至 ex: C:\Exceptionless.4.1.2861</li>
<li>运行 C:\Exceptionless.4.1.2861 中 <strong>Start.bat</strong></li>
</ol>
<p>另外若不使用 iis Express, 可用iis 启动 wwwroot,<br>应用程序池 使用v4.0 集成模式 即可</p>
<h1 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h1><ol>
<li><p>在container 启动后无法正常调用api 且container报错 分片无法建立等等问题</p>
<blockquote>
<p>疑似解决：通过kibana新增index 后一切开始正常<br>建议：先通过调用官网免费服务测试程序应用是否正确，再进行本地exceptionless调试</p>
</blockquote>
</li>
<li><p>在winServer2012 中無法安裝新版Docker 问题</p>
<blockquote>
<p>無解，后選擇使用舊版 ExceptionLess 4.1  </p>
</blockquote>
</li>
</ol>
<h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><h3 id="Docker-命令安装"><a href="#Docker-命令安装" class="headerlink" title="Docker 命令安装"></a>Docker 命令安装</h3><ol>
<li><a href="https://edwardkuo.imas.tw/paper/2017/07/21/Docker/DockerCon/" target="_blank" rel="noopener">https://edwardkuo.imas.tw/paper/2017/07/21/Docker/DockerCon/</a></li>
<li><a href="https://blog.csdn.net/qq_15071263/article/details/95184063" target="_blank" rel="noopener">https://blog.csdn.net/qq_15071263/article/details/95184063</a></li>
</ol>
<h3 id="参考资料：-1"><a href="#参考资料：-1" class="headerlink" title="参考资料："></a>参考资料：</h3><ol>
<li><a href="https://mlog.club/article/164344" target="_blank" rel="noopener">https://mlog.club/article/164344</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/virtualization/" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/virtualization/</a>  </li>
<li>windowscontainers/deploy-containers/linux-containers</li>
</ol>
<p><em>ExceptionLess 維護及使用後面在看是不是加上來</em></p>
]]></content>
      <categories>
        <category>後端技巧</category>
      </categories>
      <tags>
        <tag>Learn</tag>
        <tag>工具</tag>
        <tag>ExceptionLess</tag>
        <tag>日志管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins with .net Core .net Framework</title>
    <url>/2020-04-17-Jenkins-with-net-Core-net-Framework.html</url>
    <content><![CDATA[<blockquote>
<p>公司日漸壯大 部門協做上,運維部門上綫老是出問題<br>這篇算是一點小筆記，記錄點遇到的狀況，避免忘記<br>因爲是舊的筆記也要給大陸同事觀看，後面有留言反應的話會在找時間改</p>
</blockquote>
<h4 id="預計通過-Jenkins-達到以下流程"><a href="#預計通過-Jenkins-達到以下流程" class="headerlink" title="預計通過 Jenkins 達到以下流程"></a>預計通過 Jenkins 達到以下流程</h4><ol>
<li>取得分支 Tag</li>
<li>获取Git Tag 代码, 存在Jenkins\workspace</li>
<li>编译代码</li>
<li>FTP 同步执行档</li>
</ol>
<a id="more"></a>
<h1 id="在Windows-Server2012-下操作"><a href="#在Windows-Server2012-下操作" class="headerlink" title="在Windows Server2012 下操作"></a>在Windows Server2012 下操作</h1><h2 id="Jenkins-服务器环境"><a href="#Jenkins-服务器环境" class="headerlink" title="Jenkins 服务器环境"></a>Jenkins 服务器环境</h2><p>参考：<a href="https://medium.com/@NorthBei/ci-1-%E5%9C%A8%E5%90%84%E5%B9%B3%E5%8F%B0%E4%B8%8A%E5%AE%89%E8%A3%9Djenkins-ea0f19cc0881" target="_blank" rel="noopener">https://medium.com/@NorthBei/ci-1-%E5%9C%A8%E5%90%84%E5%B9%B3%E5%8F%B0%E4%B8%8A%E5%AE%89%E8%A3%9Djenkins-ea0f19cc0881</a>    </p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ol>
<li>先安装Git 环境 （需先下载Git 下载路径： <a href="https://git-scm.com/downloads）" target="_blank" rel="noopener">https://git-scm.com/downloads）</a></li>
<li>安装Jenkins 插件  GitLab Plugin</li>
<li>安装Jenkins 插件  Git Parameter Plug-in<br>（如果不用Git 控制项目发布（ex:Tag…）则不用安装）</li>
<li>管理Jenkins -&gt; 设定系统</li>
<li>添加 gitlab 连接设置， git 使用者 账号 密码<img src="../../../../images/Jenkins-with-net-Core-net-Framework/1.png" alt="" title="" width="400px"/>
<img src="../../../../images/Jenkins-with-net-Core-net-Framework/2.png" alt="" title="" width="400px"/>

</li>
</ol>
<h2 id="net-Core，FrameWork-编译环境设置"><a href="#net-Core，FrameWork-编译环境设置" class="headerlink" title=".net Core，FrameWork  编译环境设置"></a>.net Core，FrameWork  编译环境设置</h2><p>使用Visual Studio Install 安装 Visual Studio</p>
<ol>
<li>依照代码版本安装SDK<img src="../../../../images/Jenkins-with-net-Core-net-Framework/3.png" alt="" title="" width="400px"/></li>
<li>设置MSBuild 路径（这边依照安装路径配置）<img src="../../../../images/Jenkins-with-net-Core-net-Framework/4.png" alt="" title="" width="400px"/>
<img src="../../../../images/Jenkins-with-net-Core-net-Framework/5.png" alt="" title="" width="400px"/></li>
<li>下载 dotnet-sdk (for .net Core 框架， 一样依照专案版本下载即可)</li>
<li>下载Nuget.exe 下载路径：<a href="https://www.nuget.org/downloads" target="_blank" rel="noopener">https://www.nuget.org/downloads</a><br>C:\Users\Administrator\AppData\Roaming\NuGet<br>可配置私有nuget 库地址<img src="../../../../images/Jenkins-with-net-Core-net-Framework/6.png" alt="" title="" width="400px"/>

</li>
</ol>
<h2 id="新增作业"><a href="#新增作业" class="headerlink" title="新增作业"></a>新增作业</h2><ol>
<li><p>新增作业</p>
<img src="../../../../images/Jenkins-with-net-Core-net-Framework/7.png" alt="" title="" width="400px"/></li>
<li><p>设置作业名称</p>
<img src="../../../../images/Jenkins-with-net-Core-net-Framework/8.png" alt="" title="" width="400px"/></li>
<li><p>设置gitlab 路径，选择前面设置的git 连接</p>
<img src="../../../../images/Jenkins-with-net-Core-net-Framework/9.png" alt="" title="" width="400px"/></li>
<li><p>设置Build 参数， 若不需要可以不设置， 会以gitlab 分支最新更新</p>
<img src="../../../../images/Jenkins-with-net-Core-net-Framework/10.png" alt="" title="" width="400px"/>
<img src="../../../../images/Jenkins-with-net-Core-net-Framework/11.png" alt="" title="" width="400px"/></li>
<li><p>若不需要Tag管理版本( ${Tag} 位置改填 */{分支名称} )</p>
<img src="../../../../images/Jenkins-with-net-Core-net-Framework/12.png" alt="" title="" width="400px"/>
</li>
<li><p>更新项目内Nuget 类库 “{nuget.exe实体路径}” restore {项目}.sln</p>
<img src="../../../../images/Jenkins-with-net-Core-net-Framework/13.png" alt="" title="" width="400px"/>
<img src="../../../../images/Jenkins-with-net-Core-net-Framework/14.png" alt="" title="" width="400px"/>
</li>
<li><p>配置项目<br>command line 参数  </p>
<pre><code>/m  {项目名}.sln /t:Rebuild /p:Configuration=Release /p:DeployOnBuild=true</code></pre><img src="../../../../images/Jenkins-with-net-Core-net-Framework/15.png" alt="" title="" width="400px"/>  
另外， .net Core MsBuild command line 文档太简单，这边就不寫了，直接使用 dotnet cmd 编译   
<img src="../../../../images/Jenkins-with-net-Core-net-Framework/16.png" alt="" title="" width="400px"/>  
 dotnet publish -c Release -r win10-x64 --self-contained true  

</li>
</ol>
<blockquote>
<p>-r “win10-x64” (运行环境，ex: linux-x64)<br>–self-contained （true/false： 是否独立发布）</p>
</blockquote>
<ol start="8">
<li>Save</li>
</ol>
<h2 id="FTP-同步服务器"><a href="#FTP-同步服务器" class="headerlink" title="FTP 同步服务器"></a>FTP 同步服务器</h2><ol>
<li><p>安装Jenkins 插件  Publish Over FTP</p>
<img src="../../../../images/Jenkins-with-net-Core-net-Framework/17.png" alt="" title="" width="400px"/>
</li>
<li><p>FTP 设置， 不多说上图</p>
<img src="../../../../images/Jenkins-with-net-Core-net-Framework/18.png" alt="" title="" width="400px"/>
<img src="../../../../images/Jenkins-with-net-Core-net-Framework/19.png" alt="" title="" width="400px"/>
</li>
<li><p>iis 占用文件会造成，FTP 上传失败， 这边是这样解决的。<br>利用远程方式先关闭iis 站点， 记得先测试远端服务器是否有开启远端控制选项<br>下载微软远程控制插件<br><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/psexec" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/sysinternals/downloads/psexec</a>                </p>
</li>
</ol>
<img src="../../../../images/Jenkins-with-net-Core-net-Framework/19.png" alt="" title="" width="400px"/>

<p>解压缩后档案实体位置<br>ex:C:\PSTools\PsExec<br>C:\PSTools\PsExec \192.168.10.xxx -u administrator -p xxx<br>c:\windows\system32\inetsrv\AppCmd.exe stop apppool /apppool.name:”{apppool名称}”<br>C:\PSTools\PsExec \192.168.10.xxx -u administrator -p xxx<br>C:\windows\system32\inetsrv\AppCmd.exe stop site /site.name:”{站点名称}”<br>（stop/start/restart）</p>
]]></content>
      <categories>
        <category>後端技巧</category>
      </categories>
      <tags>
        <tag>Learn</tag>
        <tag>工具</tag>
        <tag>Jenkins</tag>
        <tag>整合管理</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 部署筆記</title>
    <url>/2020-04-18-Hexo-%E9%83%A8%E7%BD%B2%E7%AD%86%E8%A8%98.html</url>
    <content><![CDATA[<blockquote>
<p>過了好久，算是疫情下的覺醒？<br>終於在巧合下想起寫筆記部落格<br>在幾經選擇下坊間的Blog 都沒法滿足我想要的自由度，最後我選用Hexo<br>作者Tommy Chen是台灣人，而且身爲網絡相關從業人員，必須支持對吧！<br>而且熟練使用git的人，對MD語法應該都有鍾愛 : )</p>
</blockquote>
<h3 id="Hexo-官方站點"><a href="#Hexo-官方站點" class="headerlink" title="Hexo 官方站點"></a>Hexo 官方站點</h3><p><a href="https://hexo.io/zh-tw/" target="_blank" rel="noopener">https://hexo.io/zh-tw/</a></p>
<blockquote>
<p>操作環境<br>作業系統：Windows 10<br>編譯器：windows PowerShell<br>Markdown編輯器：Visual Studio code</p>
</blockquote>
<a id="more"></a>
<h1 id="安裝環境"><a href="#安裝環境" class="headerlink" title="安裝環境"></a>安裝環境</h1><h3 id="Git-安裝"><a href="#Git-安裝" class="headerlink" title="Git 安裝"></a>Git 安裝</h3><ol>
<li><a href="http://www.google.com/" target="_blank" rel="noopener">下載最新版Git</a></li>
<li>依照安裝步驟，下一步下一步…結束</li>
<li>PowerShell 檢查安裝結果<br><code>git --version</code><img src="../../../../images/Hexo-部署筆記/1.png" alt="" title="" width="400px"/>

</li>
</ol>
<h3 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h3><ol>
<li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">直接下載安裝包</a></li>
<li>依照安裝步驟，下一步下一步…結束</li>
<li>PowerShell 檢查安裝結果<br><code>node -v</code><img src="../../../../images/Hexo-部署筆記/2.png" alt="" title="" width="400px"/>

</li>
</ol>
<blockquote>
<p>有點忘記npm 是不是要單獨安裝<br><code>npm install</code></p>
</blockquote>
<h3 id="安裝Visual-Studio-Code"><a href="#安裝Visual-Studio-Code" class="headerlink" title="安裝Visual Studio Code"></a>安裝Visual Studio Code</h3><ol>
<li>上鏈接 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VScode</a></li>
<li>下載完下一步連點結束</li>
<li>開啓 VS code 安裝插件<img src="../../../../images/Hexo-部署筆記/4.png" alt="" title="" width="400px" height="200px"/>


</li>
</ol>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ol>
<li>PowerShell 安裝<br><code>npm install -g hexo-cli</code></li>
<li>PowerShell 檢查安裝結果<br><code>hexo -v</code><img src="../../../../images/Hexo-部署筆記/3.png" alt="" title="" width="400px"/>

</li>
</ol>
<h1 id="初始化Blog"><a href="#初始化Blog" class="headerlink" title="初始化Blog"></a>初始化Blog</h1><p>創建基本專案:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 創建Blog目錄及基本文件</span><br><span class="line">hexo init Blog</span><br><span class="line"># 進入Blog 目錄</span><br><span class="line">cd Blog</span><br><span class="line"># 安裝Hexo的基礎插件，存放在node_modules</span><br><span class="line">npm install</span><br><span class="line"># 新增分類頁面</span><br><span class="line">hexo new page categories</span><br><span class="line"># 新增標簽頁面</span><br><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<h3 id="Hexo-基本架構"><a href="#Hexo-基本架構" class="headerlink" title="Hexo 基本架構"></a>Hexo 基本架構</h3><p>使用VS code   File-&gt;OpenFolder-&gt;選擇Blog 目錄<br>左邊列表可看到下面架構</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Blog</span><br><span class="line">├── _config.yml     --Hexo基本參數(開關)</span><br><span class="line">├── package.json    --Node專案基本信息</span><br><span class="line">├── scaffolds       --模版文件</span><br><span class="line">├── source          --資源庫</span><br><span class="line">|   ├── _posts      --MarkDown 文件</span><br><span class="line">|   ├── about       --關於</span><br><span class="line">|   ├── categories  --分類(可不管)</span><br><span class="line">|   ├── images      --圖片檔案</span><br><span class="line">|   └── tag         --標簽(可不管)</span><br><span class="line">├── themes          --主題</span><br><span class="line">|   └── landscape   --預設主題</span><br><span class="line">└── node_modules</span><br></pre></td></tr></table></figure>

<h3 id="變更Hexo-主題"><a href="#變更Hexo-主題" class="headerlink" title="變更Hexo 主題"></a>變更Hexo 主題</h3><blockquote>
<p>官網上還有很多主題可以選用哦！這邊我使用的是 A-Ayer</p>
</blockquote>
<ol>
<li><p>安裝 ayer</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 到Blog根目錄</span><br><span class="line">cd Blog</span><br><span class="line"># 輸入命令安裝主題</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Shen-Yu&#x2F;hexo-theme-ayer.git themes&#x2F;ayer</span><br></pre></td></tr></table></figure></li>
<li><p>Hexo參數調整</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 根目錄下 _config.yml 的 theme 改爲 ayer</span><br><span class="line">theme: ayer</span><br></pre></td></tr></table></figure></li>
<li><p>更新主題</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd themes&#x2F;ayer</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></li>
<li><p>我有調整的主題設定<br>/theme/ayer/_config.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">├── menu：</span><br><span class="line">|   ├── 簡體轉繁體</span><br><span class="line">|   └── #旅行       --用&#39;#&#39;注解掉不用的</span><br><span class="line">| </span><br><span class="line">├── subtitle:       --動效</span><br><span class="line">|   ├── text        --最多支持三段字</span><br><span class="line">|   ├── text2       </span><br><span class="line">|   └── text3</span><br><span class="line">| </span><br><span class="line">├── excerpt_link:閲讀更多  </span><br><span class="line">|            --截断按钮文字   </span><br><span class="line">|            --使用:MD文件内添加 &#39;&lt;!--more--&gt;&#39; 此行后在主頁不顯示</span><br><span class="line">| </span><br><span class="line">--分页文字，nav_text可以不動，我改了頁面編排改css 所以這裏得調整</span><br><span class="line">├── nav_text:       </span><br><span class="line">|   ├── page_prev: 上一頁</span><br><span class="line">|   ├── page_next: 下一頁</span><br><span class="line">|   ├── post_prev: 下一篇</span><br><span class="line">|   └── post_next: 上一篇</span><br><span class="line">| </span><br><span class="line">├── reward_type: 0  --關閉打賞</span><br><span class="line">| </span><br><span class="line">--檔案位置在 ayer&#x2F;source&#x2F;images 我都改成無關的圖檔，因爲懶得找node</span><br><span class="line">├── alipay: &#x2F;images&#x2F;alipay.jpg  </span><br><span class="line">├── weixin: &#x2F;images&#x2F;wechat.jpg  </span><br><span class="line">|</span><br><span class="line">--使用 gitalk 所以下面這樣設置</span><br><span class="line">├── leancloud: </span><br><span class="line">|   └── enable: false   </span><br><span class="line">├── valine: </span><br><span class="line">|   └── enable: false   </span><br><span class="line">--這建議先上GitHube之後再回來改</span><br><span class="line">├── gitalk: </span><br><span class="line">|   ├── enable: true</span><br><span class="line">|   ├── clientID:       # GitHub Application Client ID</span><br><span class="line">|   ├── clientSecret:   # Client Secret</span><br><span class="line">|   ├── repo:           # Repository name</span><br><span class="line">|   ├── owner:          # GitHub ID</span><br><span class="line">|   └── admin:          # GitHub ID   </span><br><span class="line">| </span><br><span class="line">├── github: </span><br><span class="line">|   └── enable: false   </span><br><span class="line">| </span><br><span class="line">├── cnzz: </span><br><span class="line">|   └── enable: false   </span><br><span class="line">| </span><br><span class="line">├── google_analytics:  # google統計申請好后填上給你的ID</span><br><span class="line">├── pageFooter: false</span><br><span class="line">└── icp:</span><br><span class="line">    └── enable: false  #備案鏈接 好像是隔壁鄰居的法令， 可以清掉</span><br></pre></td></tr></table></figure>
<blockquote>
<p>關於gitalk<br>去 Github &gt; Settings &gt; Developer settings &gt; Personal access tokens<br>按下 「Generate new token」，進入新增 token 頁面<br>填上 Note，捲到最下面，直接按下「Generate token」<br>成功之後，複製 token，先存好，之後就看不到了，這就是 access token 囉。</p>
</blockquote>
</li>
<li><p>插件</p>
</li>
</ol>
<ul>
<li><p>hexo-generator-search 搜索   </p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd Blog</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>  /Blog/_config.yml 最下面添加</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#站内搜索</span><br><span class="line"># Hexo-generator-search</span><br><span class="line">search:</span><br><span class="line">path: search.xml</span><br><span class="line">field: post</span><br><span class="line">format: html</span><br></pre></td></tr></table></figure>
</li>
<li><p>hexo-generate-feed RSS</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
<p>  /Blog/_config.yml 最下面添加</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#RSS 訂閲設置</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: 140</span><br><span class="line">  content_limit_delim: &#39; &#39;</span><br><span class="line">  order_by: -date</span><br></pre></td></tr></table></figure></li>
<li><p>hexo-generator-index-pin-top</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="Hexo-基本語句"><a href="#Hexo-基本語句" class="headerlink" title="Hexo 基本語句"></a>Hexo 基本語句</h1><ol>
<li><code>hexo g</code>  生成靜態頁面<ul>
<li><code>hexo g -d</code> 生成文章后立即部署 Blog/public</li>
</ul>
</li>
<li><code>hexo s</code>  啓動hexo 服務 本地 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>  <ul>
<li><code>hexo s -p 3000</code> 設置運作端口為3000  </li>
<li><code>hexo s -g</code> 本地啓動前，先執行hexo g</li>
</ul>
</li>
<li><code>hexo clean</code> 清理 Blog/public</li>
</ol>
<h1 id="上傳"><a href="#上傳" class="headerlink" title="上傳"></a>上傳</h1><ol>
<li>首先在 GitHub 中開啓 repository  <blockquote>
<p>GitHub 注冊和開專案的地方允許我引用別人的<br>畢竟人家經驗豐富寫的比我好多了<br><a href="https://pengloo53.gitbooks.io/hexo/content/chapter1/8.%20%E6%89%98%E7%AE%A1%E5%88%B0Github%E6%88%96Coding.html" target="_blank" rel="noopener">https://pengloo53.gitbooks.io/hexo/content/chapter1/8.%20%E6%89%98%E7%AE%A1%E5%88%B0Github%E6%88%96Coding.html</a><br>依照步奏來就行  </p>
<img src="../../../../images/Hexo-部署筆記/5.png" alt="" title="" width="400px"/>   </blockquote>
</li>
<li>點選圖片中按鈕，複製github鏈接<img src="../../../../images/Hexo-部署筆記/6.png" alt="" title="" width="400px"/>

</li>
</ol>
<p>3.到 Blog/public 右鍵 Git Bash here<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    $ git clone &#123;複製的鏈接&#125;</span><br><span class="line">    &#96;&#96;&#96;  </span><br><span class="line">&gt;如果repository有東西的話  </span><br><span class="line">在Blog 以外的地方開啓 空資料夾  </span><br><span class="line">&lt;img src&#x3D;&quot;..&#x2F;..&#x2F;..&#x2F;..&#x2F;images&#x2F;Hexo-部署筆記&#x2F;7.png&quot; alt&#x3D;&quot;&quot; title&#x3D;&quot;&quot; width&#x3D;&quot;400px&quot;&#x2F;&gt;</span><br><span class="line">    1. 右鍵 Git Bash here</span><br></pre></td></tr></table></figure><br>    $ git clone {複製的鏈接}<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    2. clone 跑完后，剪下 .git（隱藏文件夾）  </span><br><span class="line">    3. 貼到 Blog&#x2F;public 裏面</span><br><span class="line"></span><br><span class="line">&gt;git 熟練的可以直接在 Blog&#x2F;public init 開新倉庫后，  </span><br><span class="line">設置remote 為剛複製的鏈接</span><br><span class="line"></span><br><span class="line">4. Git 三連擊  </span><br><span class="line">在 Blog&#x2F;public 中 Shift+滑鼠右鍵 開啓PowerShell</span><br></pre></td></tr></table></figure><br>hexo g -d</p>
<p>git add .</p>
<p>git commit -m ‘{看你喜歡怎麽描述}’<br>#請習慣 ‘Add:New Article’ or ‘Modify: Something’<br>#便於之後git 管理</p>
<p>git push</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;..&#x2F;..&#x2F;..&#x2F;..&#x2F;images&#x2F;Hexo-部署筆記&#x2F;9.png&quot; alt&#x3D;&quot;&quot; title&#x3D;&quot;&quot; width&#x3D;&quot;400px&quot;&#x2F;&gt;  </span><br><span class="line">&gt; git的部分，是需要花時間學習的， 不論用不用，git的思想對程式設計也是有幫助的</span><br><span class="line"></span><br><span class="line">5. 開啓 https:&#x2F;&#x2F;&#123;your repository&#125;.github.io  </span><br><span class="line">你的頁面就好啦~~~~</span><br><span class="line"></span><br><span class="line"># 補充</span><br><span class="line"></span><br><span class="line">## Google Ad</span><br><span class="line">還沒過，過了上了再補充</span><br><span class="line"></span><br><span class="line">## Google Search</span><br><span class="line">1. 進入到 Blog 安裝sitemap 套件</span><br><span class="line">&#96;$ npm install hexo-generator-sitemap --save&#96;</span><br><span class="line">2. Blog&#x2F;_config.yml 最下面貼上</span><br></pre></td></tr></table></figure>
<p>#Sitemap<br>sitemap:S<br>    path: sitemap.xml</p>
<p>```<br>3. 然後到 <a href="https://search.google.com/search-console" target="_blank" rel="noopener">Google Search Console</a> 中注冊登入， 新增資源<br><img src="../../../../images/Hexo-部署筆記/9.png" alt="" title="" width="400px"/><br>4. 點擊之後 掃描 sitemap.xml 即可錄入 google search 中啦<br><img src="../../../../images/Hexo-部署筆記/10.png" alt="" title="" width="400px"/></p>
<h2 id="Google-Analytics"><a href="#Google-Analytics" class="headerlink" title="Google Analytics"></a>Google Analytics</h2><ol>
<li>先到 <a href="https://marketingplatform.google.com/about/analytics/" target="_blank" rel="noopener">Google Analytics</a> 首頁 登入或建立帳戶，新增一個資源，填完以後按取得追蹤編號.  </li>
<li>Blog/theme/ayer/_config.yml<br>找到 google_analytics 添加申請到的追蹤編號</li>
<li>進入 Google Analytics 頁面點選 即時 &gt; 總覽</li>
</ol>
<p>再另外開個分頁瀏覽你自己的網站看看有沒有 線上使用者 跟 流量 測試一下！</p>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><ol>
<li>ayer 主題 (<a href="https://zhuanlan.zhihu.com/p/98597931" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/98597931</a> )</li>
<li>gitalk 設置(<a href="https://dwatow.github.io/2019/01-08-hexo/gitalk/" target="_blank" rel="noopener">https://dwatow.github.io/2019/01-08-hexo/gitalk/</a> )</li>
<li>不蒜子統計(<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">http://busuanzi.ibruce.info/</a> )</li>
<li>hexo搭建參考(<a href="https://pengloo53.gitbooks.io/hexo/content/chapter1/8.%20%E6%89%98%E7%AE%A1%E5%88%B0Github%E6%88%96Coding.html" target="_blank" rel="noopener">https://pengloo53.gitbooks.io/hexo/content/chapter1/8.%20%E6%89%98%E7%AE%A1%E5%88%B0Github%E6%88%96Coding.html</a>)</li>
</ol>
<h3 id="MarkDown書寫參考："><a href="#MarkDown書寫參考：" class="headerlink" title="MarkDown書寫參考："></a>MarkDown書寫參考：</h3><ol>
<li><a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">https://www.jianshu.com/p/191d1e21f7ed</a></li>
<li><a href="http://xianbai.me/learn-md/article/syntax/links.html" target="_blank" rel="noopener">http://xianbai.me/learn-md/article/syntax/links.html</a></li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>搭建個人Blog</tag>
      </tags>
  </entry>
</search>
